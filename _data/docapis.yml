sidebartitle: Documenting APIs
folders:

- title: "Chapter 1: Introduction to REST APIs"
  landing: /learnapidoc/docapis_introtoapis.html
  section: one
  class: first
  description: >
    REST APIs consist of requests and responses between clients and servers over the web. Because REST APIs are flourishing (every company seems to have an API), there is a strong need for helpful, accurate API documentation. Technical writers can apply their skills to fill this gap in highly valued ways. This introduction discusses different types of APIs, reasons for API growth, and why docs are critical for REST APIs. It outlines course contents, prerequisites, goals, and target audiences. The introduction sets the stage for learning API documentation through the hands-on activities in the course.
  folderitems:

  - title: "Overview" 
    jurl: /learnapidoc/docapis_introtoapis.html
    type: web

  - title: Course Overview
    jurl: /learnapidoc/index.html

  - title: "What's new"
    jurl: /learnapidoc/docapis_whats_new.html

  - title: Workshop video recordings
    jurl: /learnapidoc/docapis_course_videos.html

  - title: Download PDFs
    jurl: /learnapidoc/download.html

  - title: Workshop agenda, slides, activities
    jurl: /learnapidoc/workshop.html

  - title: Why I developed this course
    jurl: /learnapidoc/docapis_foreword.html

  - title: About the author
    jurl: /learnapidoc/docapis_about_the_author.html

  - title: Introduction to REST API documentation
    jurl: /learnapidoc/docapis_intro_to_rest_api_doc.html

  - title: What is a REST API?
    jurl: /learnapidoc/docapis_what_is_a_rest_api.html

  - title: "Activity: Identify your goals"
    jurl: /learnapidoc/docapis_identify_your_goals.html

  - title: "Developer Documentation Trends: Survey Results"
    jurl: /learnapidoc/docapis_trends.html

- title: "Chapter 2: Using an API like a developer"
  landing: /learnapidoc/likeadeveloper.html
  section: two
  description: > 
    This chapter covers using a REST API from a developer's perspective. It walks through getting API keys, making requests with Postman and curl, analyzing JSON responses, and dynamically displaying API responses on a web page. These hands-on activities provide context for understanding developer needs and how developers use APIs. After using the API, you switch perspectives and start documenting the API in the next chapter. Going through the developer workflow first gives you insight into developer requirements for documentation.
  folderitems:

  - title: "Overview" 
    jurl: /learnapidoc/likeadeveloper.html
    type: web

  - title: "Scenario for using a weather API"
    jurl: /learnapidoc/docapis_scenario_for_using_weather_api.html

  - title: "Get authorization keys"
    jurl: /learnapidoc/docapis_get_auth_keys.html

  - title: "Submit requests through Postman"
    jurl: /learnapidoc/docapis_postman.html

  - title: "curl intro and installation"
    jurl: /learnapidoc/docapis_install_curl.html

  - title: "Make a curl call"
    jurl: /learnapidoc/docapis_make_curl_call.html

  - title: "Understand curl more"
    jurl: /learnapidoc/docapis_understand_curl.html

  - title: "Activity: Use methods with curl"
    jurl: /learnapidoc/docapis_curl_with_petstore.html

  - title: "Analyze the JSON response"
    jurl: /learnapidoc/docapis_analyze_json.html

  - title: "Inspect the JSON from the response payload"
    jurl: /learnapidoc/docapis_json_console.html

  - title: "Access and print a specific JSON value"
    jurl: /learnapidoc/docapis_access_json_values.html

  - title: "Dive into dot notation"
    jurl: /learnapidoc/docapis_diving_into_dot_notation.html

- title: "Chapter 3: Documenting API endpoints"
  landing: /learnapidoc/docendpoints.html
  section: three
  description: > 
    This chapter covers documenting API endpoints, the core reference documentation for APIs. It walks through the five key sections: resource description, endpoints and methods, parameters, request example, and response example/schema. These sections provide the reference details developers need to work with the API. The chapter includes a hands-on tutorial to create documentation for a sample endpoint, as well as activities to evaluate and improve existing API reference topics. The goal is to learn best practices for structuring and writing clear API endpoint documentation.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/docendpoints.html
    type: web

  - title: "A new endpoint to document"
    jurl: /learnapidoc/docapis_new_endpoint_to_doc.html

  - title: "API reference tutorial overview"
    jurl: /learnapidoc/docapis_api_reference_tutorial_overview.html

  - title: "Step 1: Resource description"
    jurl: /learnapidoc/docapis_resource_descriptions.html

  - title: "Step 2: Endpoints and methods"
    jurl: /learnapidoc/docapis_resource_endpoints.html

  - title: "Step 3: Parameters"
    jurl: /learnapidoc/docapis_doc_parameters.html

  - title: "Step 4: Request example"
    jurl: /learnapidoc/docapis_doc_sample_requests.html

  - title: "Step 5: Response example and schema"
    jurl: /learnapidoc/docapis_doc_sample_responses_and_schema.html

  - title: "Putting it all together"
    jurl: /learnapidoc/docapis_finished_doc_result.html

  - title: "Activity: What's wrong with this API reference topic"
    jurl: /learnapidoc/docapis_api_whats_wrong_activity.html

  - title: "Activity: Evaluate API reference docs for core elements"
    jurl: /learnapidoc/docapis_api_reference_activity.html

- title: "Chapter 4: OpenAPI spec and generated reference docs"
  landing: /learnapidoc/restapispecifications.html
  section: four
  description: >
    Chapter 4 covers the OpenAPI specification, which provides a standard way to describe REST APIs. The chapter introduces the OpenAPI spec and shows how tools like Stoplight Studio, Swagger UI, SwaggerHub, and Redocly can use an OpenAPI file to generate interactive API reference documentation. The chapter includes tutorials on creating an OpenAPI file both manually and using a visual editor, validating the spec, and publishing the documentation. Key topics include spec-first development, integrating reference docs into full documentation, and leveraging the OpenAPI spec to empower API design, testing, implementation, and documentation.

  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/restapispecifications.html
    type: web

  - title: "Overview of REST API specification formats"
    jurl: /learnapidoc/pubapis_rest_specification_formats.html

  - title: "Introduction to the OpenAPI specification"
    jurl: /learnapidoc/pubapis_openapi_intro.html

  - title: "Stoplight: Visual modeling tools for creating your spec"
    jurl: /learnapidoc/pubapis_stoplight.html

  - title: "Getting started tutorial: Using Stoplight Studio to create an OpenAPI specification document"
    jurl: /learnapidoc/pubapis_openapis_quickstart_stoplight.html

  - title: "Swagger UI tutorial"
    jurl: /learnapidoc/pubapis_swagger.html

  - title: "SwaggerHub introduction and tutorial"
    jurl: /learnapidoc/pubapis_swaggerhub_smartbear.html

  - title: "Swagger UI Demo"
    jurl: /learnapidoc/pubapis_swagger_demo.html

  - title: "Integrating Swagger UI with the rest of your docs"
    jurl: /learnapidoc/pubapis_combine_swagger_and_guide.html

  - title: "Redocly tutorial -- authoring and publishing API docs with Redocly's command-line tools"
    jurl: /learnapidoc/pubapis_redocly.html

  - title: "Redoc Community Edition Basic Demo"
    jurl: /learnapidoc/pubapis_redoc.html

- title: "Chapter 5: Step-by-step OpenAPI code tutorial"
  landing: /learnapidoc/openapi_tutorial.html
  section: five
  description: > 
    Chapter 5 provides a step-by-step tutorial for manually creating an OpenAPI specification document. It walks through each of the main objects in the OpenAPI spec, including openapi, info, servers, paths, components, security, tags, and externalDocs. For each object, it shows code samples and explains how the information maps to an interactive documentation site powered by the OpenAPI spec. The tutorial uses the OpenWeatherMap API as an example and shows how to build the OpenAPI document in the Swagger Editor using YAML. The goal is to gain familiarity with the OpenAPI objects and properties by building a valid OpenAPI file from scratch.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/openapi_tutorial.html
    type: web

  - title: "OpenAPI tutorial using Swagger Editor and Swagger UI: Overview"
    jurl: /learnapidoc/pubapis_openapi_tutorial_overview.html

  - title: "Working in YAML"
    jurl: /learnapidoc/pubapis_yaml.html

  - title: "Step 1: The openapi object"
    jurl: /learnapidoc/pubapis_openapi_step1_openapi_object.html

  - title: "Step 2: The info object"
    jurl: /learnapidoc/pubapis_openapi_step2_info_object.html

  - title: "Step 3: The servers object"
    jurl: /learnapidoc/pubapis_openapi_step3_servers_object.html

  - title: "Step 4: The paths object"
    jurl: /learnapidoc/pubapis_openapi_step4_paths_object.html

  - title: "Step 5: The components object"
    jurl: /learnapidoc/pubapis_openapi_step5_components_object.html

  - title: "Step 6: security object"
    jurl: /learnapidoc/pubapis_openapi_step6_security_object.html

  - title: "Step 7: The tags object"
    jurl: /learnapidoc/pubapis_openapi_step7_tags_object.html

  - title: "Step 8: The externalDocs object"
    jurl: /learnapidoc/pubapis_openapi_step8_externaldocs_object.html

  - title: "Activity: Create an OpenAPI specification document"
    jurl: /learnapidoc/pubapis_openapi_activity.html

- title: "Chapter 6: Testing API docs"
  landing: /learnapidoc/testingdocs.html
  section: six
  description: >
    Chapter 6 focuses on the importance of testing documentation, especially for APIs and developer documentation. It emphasizes setting up a test environment, walking through all instructions personally, testing assumptions against real users, and collaborating with QA teams. Key points are that documentation should be treated like code and put through rigorous testing before release. Writers should not just passively document what developers say but actively validate everything. The chapter provides strategies for testing docs, getting access to test systems, and soliciting user feedback. Thorough testing leads to higher quality and more accurate documentation.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/testingdocs.html
    type: web

  - title: "Overview of testing your docs"
    jurl: /learnapidoc/testingdocs_overview.html

  - title: "Set up a test environment"
    jurl: /learnapidoc/testingdocs_test_environment.html

  - title: "Test all instructions yourself"
    jurl: /learnapidoc/testingdocs_test_your_instructions.html

  - title: "Test your assumptions"
    jurl: /learnapidoc/testingdocs_testing_assumptions.html

  - title: "Activity: Test your project's documentation"
    jurl: /learnapidoc/testingdocs_activity.html

- title: "Chapter 7: Conceptual topics in API docs"
  landing: /learnapidoc/docconceptual.html
  section: seven
  description: >
    Chapter 7 covers the common conceptual topics that make up about half of API documentation, including product overviews, getting started tutorials, authentication and authorization, status and error codes, rate limiting and thresholds, quick reference guides, glossaries, and best practices. These conceptual topics provide critical context for understanding and using the API beyond just the reference documentation. The chapter explores best practices for each topic, reasons why the topics are often neglected, and includes examples from API documentation sites. Activities guide you to evaluate these topics in an open source API project and decide which examples demonstrate best practices. The chapter emphasizes the importance of conceptual documentation in facilitating the user's journey in understanding and adopting the API.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/docconceptual.html
    type: web

  - title: "API conceptual topics overview"
    jurl: /learnapidoc/docapis_conceptual_topics_overview.html

  - title: "API product overviews"
    jurl: /learnapidoc/docapis_doc_overview.html

  - title: "API getting started tutorials"
    jurl: /learnapidoc/docapis_doc_getting_started_section.html

  - title: API authentication and authorization
    jurl: /learnapidoc/docapis_more_about_authorization.html

  - title: "API status and error codes"
    jurl: /learnapidoc/docapis_doc_status_codes.html

  - title: "API rate limiting and thresholds"
    jurl: /learnapidoc/docapis_rate_limiting_and_thresholds.html

  - title: "API quick reference"
    jurl: /learnapidoc/docapis_doc_quick_reference.html

  - title: "API glossary"
    jurl: /learnapidoc/docapis_glossary_section.html

  - title: "API best practices"
    jurl: /learnapidoc/docapis_best_practices_with_api.html

  - title: "Activity: Complete the SendGrid Getting Started tutorial"
    jurl: /learnapidoc/docapis_getting_started_activity.html

  - title: "Activity: Assess the conceptual content in your project"
    jurl: /learnapidoc/docapis_concept_activity.html

- title: "Chapter 8: Code tutorials"
  landing: /learnapidoc/docapiscode.html
  section: eight
  description: >
    Chapter 8 covers techniques for documenting code, one of the most challenging aspects of API documentation, especially for non-engineers. It starts by explaining why code is difficult to document, including its non-linear nature, variation of audience technical levels, and dependence on specific languages. The chapter then explores five strategies for documenting code: separating conceptual "why" from code "how," using a third column for juxtaposed commentary, building up complexity in steps like Legos, starting simple and expanding complexity, and creating interactive browser experiences.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/docapiscode.html
    type: web

  - title: "Common characteristics of code tutorials"
    jurl: /learnapidoc/docapis_code_tutorials_common_characteristics.html

  - title: Why documenting code is so difficult
    jurl: /learnapidoc/docapis_code_difficulty.html

  - title: What research tells us about documenting code
    jurl: /learnapidoc/docapiscode_research_on_documenting_code.html

  - title: Five strategies for documenting code
    jurl: /learnapidoc/docapis_code_strategies.html

  - title: Code samples
    jurl: /learnapidoc/docapis_codesamples_bestpractices.html

  - title: Sample apps
    jurl: /learnapidoc/docapis_sample_apps.html

  - title: SDKs (software development kits)
    jurl: /learnapidoc/docapis_sdks.html

  - title: "API design and usability"
    jurl: /learnapidoc/evaluating-api-design.html

  - title: "Developer experience (DevX) usability"
    jurl: /learnapidoc/devx-usability-examples.html

- title: "Chapter 9: The writing process"
  landing: /learnapidoc/writing_process.html
  section: nine
  description: > 
    Chapter 9 covers the 5 main steps in the API documentation writing process: planning (creating a doc plan, establishing roles), gathering information (interviewing engineers, product managers, partner engineers, QA), writing (separating content into groups, outlining, scheduling reviews, writing the first draft), reviewing (strategies for ineffective and effective reviews, incorporating feedback, resolving conflicts), and publishing (integrating new content, adding metadata, coordinating timing, publicizing releases). The chapter provides practical tips tailored to tech writers creating API documentation, such as recording engineering interviews, bringing questions to review meetings, and publicizing releases through newsletters.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/writing_process.html
    type: web

  - title: "Overview of the writing process"
    jurl: /learnapidoc/docapis_writing_process_overview.html

  - title: "1. Planning"
    jurl: /learnapidoc/docapis_planning.html

  - title: "2. Information gathering"
    jurl: /learnapidoc/docapis_information_gathering.html

  - title: "3. Writing"
    jurl: /learnapidoc/docapis_writing.html

  - title: "4. Reviewing"
    jurl: /learnapidoc/docapis_reviewing.html

  - title: "5. Publishing"
    jurl: /learnapidoc/docapis_publishing.html

- title: "Chapter 10: Publishing API docs"
  landing: /learnapidoc/publishingapis.html
  section: ten
  description: >
    Chapter 10 covers best practices and tools for publishing API documentation. It discusses common design patterns seen in API doc sites, such as consistent structure and templates, seamless branding, abundant code samples, lengthy pages, and interactive API explorers. The chapter then explores docs-as-code tools like static site generators, version control systems, Markdown, and hosting platforms. It provides an overview of tools like Jekyll, Hugo, Sphinx, GitHub Pages, ReadTheDocs, and more. The chapter concludes with recommendations for selecting the right publishing tools based on your content, authors, infrastructure, and other requirements. The main goal is to choose lightweight tools that integrate into engineering workflows, so developers can more easily contribute to the docs.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/publishingapis.html
    type: web

  - title: "Overview for publishing API docs"
    jurl: /learnapidoc/pubapis_overview.html

  - title: "Survey of API doc sites"
    jurl: /learnapidoc/pubapis_apilist.html

  - title: "Design patterns with API doc sites"
    jurl: /learnapidoc/pubapis_design_patterns.html

  - title: "Docs-as-code tools"
    jurl: /learnapidoc/pubapis_docs_as_code.html

  - title: "More about Markdown"
    jurl: /learnapidoc/pubapis_markdown.html

  - title: "Version control systems"
    jurl: /learnapidoc/pubapis_version_control.html

  - title: "Static site generators"
    jurl: /learnapidoc/pubapis_static_site_generators.html

  - title: "Hosting and deployment options"
    jurl: /learnapidoc/pubapis_hosting_and_deployment.html

  - title: "Hybrid documentation systems"
    jurl: /learnapidoc/pubapis_hybrid_systems.html

  - title: "Which tool to choose for API docs &mdash; my recommendations"
    jurl: /learnapidoc/pubapis_which_tool_to_choose.html

- title: "Chapter 11: Publishing tools"
  landing: /learnapidoc/publishingtools.html
  section: eleven
  description: > 
    This chapter focuses on publishing tools and workflows for technical documentation. It provides tutorials on using GitHub wikis and GitHub Desktop to manage content with Git version control. It also covers pull request workflows through GitHub as a way to collaborate on content. There is a tutorial on using Jekyll with CloudCannon for continuous deployment, and a section on using Oxygen XML with docs-as-code workflows. The chapter also profiles Blobr, an API portal that arranges API use cases into products, and includes a case study on transitioning documentation processes to docs-as-code. The chapter finishes with a frequently asked questions section on documentation tools.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/publishingtools.html
    type: web
    
  - title: "Activity: Manage content in a GitHub wiki"
    jurl: /learnapidoc/pubapis_github_wikis.html

  - title: "Activity: Use the GitHub Desktop Client"
    jurl: /learnapidoc/pubapis_github_desktop_client.html

  - title: "Activity: Pull request workflows through GitHub"
    jurl: /learnapidoc/pubapis_github_pull_requests.html

  - title: "Jekyll and CloudCannon continuous deployment tutorial"
    jurl: /learnapidoc/pubapis_jekyll.html

  - title: "Using Oxygen XML with docs-as-code workflows"
    jurl: /learnapidoc/pubapis_oxygenxml.html

  - title: "Blobr: An API portal that arranges your API's use cases as individual products"
    jurl: /learnapidoc/pubapis_blobr.html

  - title: "Case study: Switching tools to docs-as-code"
    jurl: /learnapidoc/pubapis_switching_to_docs_as_code.html

  - title: "Tools FAQ"
    jurl: /learnapidoc/docapis_faq_tools.html

- title: "Chapter 12: Thriving in the API doc space"
  landing: /learnapidoc/jobapis.html
  section: twelve
  description: >
    This chapter focuses on getting a job in API documentation and thriving in the field. It covers the basic qualifications needed, such as familiarity with programming languages, experience writing developer docs, and a portfolio with writing samples. The chapter discusses how much code knowledge is needed and strategies for learning code. It looks at the best locations for API doc jobs, with a focus on tech hubs like California, Texas, New York, and Virginia. The chapter includes activities for finding an open source project to contribute to and creating a sample API reference topic, which will build your portfolio. Overall, the chapter provides guidance on building the skills and portfolio needed to get an API documentation job.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/jobapis.html
    type: web

  - title: "The job market for API technical writers"
    jurl: /learnapidoc/jobapis_overview.html

  - title: "How much code do you need to know?"
    jurl: /learnapidoc/jobapis_learning_code.html

  - title: "Best locations for API documentation jobs"
    jurl: /learnapidoc/jobapis_location.html

  - title: "Activity: Find an Open-Source Project"
    jurl: /learnapidoc/docapis_find_open_source_project.html

  - title: "Activity: Create or fix an API reference documentation topic"
    jurl: /learnapidoc/docapis_work_on_conceptual_topic.html

- title: "Chapter 13: Native library APIs"
  landing: /learnapidoc/nativelibraryapis.html
  section: thirteen
  description: >
    This chapter covers native library APIs, which are programming language-specific APIs like Java and C++ that get compiled into a developer's code rather than accessed over web protocols. It provides an overview comparing REST APIs to native library APIs. The chapter includes a tutorial on generating Javadoc documentation from a sample Java project, with details on Javadoc tags and style guidelines. It also covers Doxygen, a popular document generator for C++. The chapter emphasizes that reference documentation alone is insufficient, and technical writers need to create conceptual documentation around tasks as well. Overall, the chapter aims to clarify native library APIs and how to approach documentation for them.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/nativelibraryapis.html
    type: web

  - title: "Overview of native library APIs"
    jurl: /learnapidoc/nativelibraryapis_overview.html

  - title: "Get the sample Java project"
    jurl: /learnapidoc/nativelibraryapis_getting_the_source.html

  - title: "Java crash course"
    jurl: /learnapidoc/nativelibraryapis_java_crash_course.html

  - title: "Activity: Generate a Javadoc from a sample project"
    jurl: /learnapidoc/nativelibraryapis_create_javadoc.html

  - title: "Javadoc tags"
    jurl: /learnapidoc/nativelibraryapis_javadoc_tags.html

  - title: "Explore the Javadoc output"
    jurl: /learnapidoc/nativelibraryapis_exploring_javadoc_output.html

  - title: "Make edits to Javadoc tags"
    jurl: /learnapidoc/nativelibraryapis_editing_javadoc.html

  - title: "Doxygen, a document generator mainly for C++"
    jurl: /learnapidoc/nativelibraryapis_doxygen.html

  - title: "Create non-ref docs with native library APIs"
    jurl: /learnapidoc/nativelibraryapis_nonrefdocs.html

- title: "Chapter 14: Processes and methodology"
  landing: /learnapidoc/docapis_managing_doc_processes.html
  section: fourteen
  description: > 
    Chapter 14 covers processes and methodology for managing developer portal documentation. It outlines strategies for handling both large documentation projects and smaller documentation requests, including following an adapted Scrum methodology. The chapter also discusses kickoff meetings, documentation reviews, maintaining existing docs, collecting feedback, working with external contributors, changing documentation culture, sending status reports, broadcasting meeting notes, and ensuring documentation coverage for software releases. The key themes are integrating documentation into formal processes, building visibility for the documentation team, and maintaining healthy documentation practices.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/docapis_managing_doc_processes.html
    type: web

  - title: "DX content strategy with developer portals"
    jurl: /learnapidoc/docapis_dx_content_strategy.html

  - title: "Following agile scrum with documentation projects"
    jurl: /learnapidoc/pubapis_agile_scrum_for_docs.html

  - title: "Managing large documentation projects"
    jurl: /learnapidoc/docapis_managing_doc_projects.html

  - title: "Managing small documentation requests"
    jurl: /learnapidoc/docapis_managing_small_doc_requests.html

  - title: "Managing SDK releases"
    jurl: /learnapidoc/docapis_managing_sdk_releases.html

  - title: "Documentation kickoff meetings and product demos"
    jurl: /learnapidoc/docapis_kickoff_meeting_agenda.html

  - title: "Processes for reviewing documentation"
    jurl: /learnapidoc/docapis_review_processes.html

  - title: "Maintaining existing documentation"
    jurl: /learnapidoc/docapis_doc_maintenance_processes.html

  - title: "Collecting feedback post-release"
    jurl: /learnapidoc/docapis_collecting_feedback_post_release.html

  - title: "Managing content from external contributors"
    jurl: /learnapidoc/docapis_processes_for_external_contributors.html

  - title: "Changing internal doc culture"
    jurl: /learnapidoc/docapis_changing_internal_doc_culture.html

  - title: "Sending doc status reports -- a tool for visibility and relationship building"
    jurl: /learnapidoc/docapis_status_reports.html

  - title: Broadcasting your meeting notes to influence a wider audience
    jurl: /learnapidoc/docapis_meeting_notes.html

  - title: "Ensuring documentation coverage with each software release"
    jurl: /learnapidoc/docapis_release_process.html

- title: "Chapter 15: Metrics and measurement"
  landing: /learnapidoc/docapis_metrics_and_measurement.html
  section: fifteen
  description: >
    Chapter 15 discusses ways to measure API documentation quality and track improvement efforts. The chapter first looks at the challenges of relying solely on user surveys and satisfaction scores to evaluate documentation. It then surveys different research on defining documentation quality, identifying common criteria like accuracy, clarity, completeness, and relevance. The chapter introduces a comprehensive quality checklist with criteria tailored specifically to API documentation. The checklist can guide an in-depth review to assess strengths and weaknesses of documentation and identify areas needing improvement. While a scoring approach is discussed, the real value is having concrete, actionable criteria for elevating documentation quality.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/docapis_metrics_and_measurement.html
    type: web

  - title: Measuring documentation quality through user feedback
    jurl: /learnapidoc/docapis_measuring_impact.html

  - title: Different approaches for assessing information quality
    jurl: /learnapidoc/docapis_metrics_assessing_information_quality.html

  - title: Quality checklist for API documentation
    jurl: /learnapidoc/docapis_quality_checklist.html

  - title: Quantifying your progress
    jurl: /learnapidoc/docapis_metrics_quantifying_progress.html

- title: "Chapter 16: AI and API documentation"
  landing: /learnapidoc/ai.html
  section: sixteen
  description: >
    Chapter 16 explores practical applications of LLM-based AI tools like ChatGPT and Claude for API documentation workflows. It looks at using an AI assistant plugin in Oxygen XML for tasks like improving readability, generating index terms, and fixing errors. Other applications covered include using AI for pattern-based content prompts, building automation scripts, learning code basics, getting language advice, creating doc updates for bugs, analyzing search analytics for themes, comparing API responses to docs, and assisting with glossary creation. While AI tools can't fully replace human technical writers, the chapter focuses on targeted ways AI can provide helpful assistance with certain documentation tasks, accelerating productivity.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/ai.html
    type: web

  - title:  "First look at the Oxygen XML AI Positron Assistant"
    jurl: /learnapidoc/docapis_oxygenxml_positron_assistant.html

  - title:  "AI document engineering with pattern-based prompts"
    jurl: /learnapidoc/docapis_pattern_prompts.html

  - title: "Using AI tools to build, stage, and publish API reference docs"
    jurl: /learnapidoc/ai-tools-build-publish-api-docs.html

  - title: "Using AI to learn coding"
    jurl: /learnapidoc/docapis_ai_learn_coding.html

  - title:  "Using AI for language advice"
    jurl: /learnapidoc/docapis_ai_language_advice.html

  - title:  "Using AI to create doc updates based on bugs"
    jurl: /learnapidoc/docapis_ai_fix_bugs.html

  - title:  "Using AI For thematic analysis"
    jurl: /learnapidoc/docapis_thematic_analysis.html

  - title:  "Using AI for comparison tasks with API responses"
    jurl: /learnapidoc/docapis_ai_comparison_tasks.html

  - title:  "Using AI for glossary definitions"
    jurl: /learnapidoc/docapis_ai_glossary_definitions.html

  - title:  "Using AI for summaries"
    jurl: /learnapidoc/docapis_ai_summaries.html

- title: "Chapter 17: Glossary"
  landing: /learnapidoc/glossary_overview.html
  section: seventeen
  description: >
    The glossary chapter provides definitions and explanations for over 130 key terms related to API documentation. The terms span a wide range of topics relevant to documenting REST APIs, including general API concepts, OpenAPI/Swagger specifics, API parameters, responses, methods, tools, project management approaches, writing best practices, and more. This glossary serves as a quick reference for readers to look up unfamiliar documentation terminology they encounter throughout the course material. The terms are organized alphabetically as well as by common topic groups, allowing readers to easily browse terms within certain subject areas.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/glossary_overview.html
    type: web

  - title: "Glossary"
    jurl: /learnapidoc/glossary.html

  - title: "Glossary groups"
    jurl: /learnapidoc/glossary_groups.html

- title: "Chapter 18: Additional resources"
  landing: /learnapidoc/resources.html
  section: eighteen
  description: > 
    Chapter 18 provides a variety of supplementary material to expand on topics covered in the course. It includes a detailed article comparing REST and GraphQL APIs and recommendations for documenting each. There are several hands-on activities for calling additional APIs to get more practice working with endpoints, parameters, and responses. Tutorials are provided for two alternative API specification formats: RAML and API Blueprint. The chapter also contains answer keys for activities, as well as video recordings of full-day workshops delivering this course content. Overall, this additional resources section offers more in-depth exploration of key course topics for those looking to further solidify their learning.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/resources.html
    type: web

  - title: "Documenting GraphQL APIs"
    jurl: /learnapidoc/docapis_graphql_apis.html

  - title: "More REST API activities"
    jurl: /learnapidoc/docapis_more_rest_activities.html

  - title: "Activity: Get event information using the Eventbrite API"
    jurl: /learnapidoc/docapis_eventbrite_example.html

  - title: "Activity: Retrieve a gallery using the Flickr API"
    jurl: /learnapidoc/docapis_flickr_example.html

  - title: "Activity: Get wind speed using the Aeris Weather API"
    jurl: /learnapidoc/docapis_aerisweather_example.html

  - title: "RAML tutorial"
    jurl: /learnapidoc/pubapis_raml.html

  - title: "API Blueprint tutorial"
    jurl: /learnapidoc/pubapis_api_blueprint.html

  - title: "API jeopardy answer key"
    jurl: /learnapidoc/jeopardy_answer_key.html

  - title: "What's wrong with this topic answer key"
    jurl: /learnapidoc/whats_wrong_answer_key.html

  - title: "Menlo Park API workshop video recording"
    jurl: /learnapidoc/menlo_park_workshop_recording.html

  - title: "Denver API workshop video recording"
    jurl: /learnapidoc/denver_workshop_recording.html

  - title: "API doc presentation video recordings"
    jurl: /learnapidoc/api_doc_presentations.html
