sidebartitle: Documenting APIs
folders:

- title: "Chapter 1: Introduction to REST APIs"
  landing: /learnapidoc/docapis_introtoapis.html
  section: one
  class: first
  description: >
    REST APIs are flourishing in the marketplace, and the web is becoming a mashup of interconnected APIs. REST APIs consist of requests to and responses from a web server. Job prospects are hot for technical writers who can write developer documentation. This course will help you break into API documentation, especially if you complete the many portfolio-building activities.
  folderitems:

  - title: "Overview" 
    jurl: /learnapidoc/docapis_introtoapis.html
    type: web

  - title: Course Overview
    jurl: /learnapidoc/index.html

  - title: "What's new"
    jurl: /learnapidoc/docapis_whats_new.html

  - title: Workshop video recordings
    jurl: /learnapidoc/docapis_course_videos.html

  - title: Download PDFs
    jurl: /learnapidoc/download.html

  - title: Workshop agenda, slides, activities
    jurl: /learnapidoc/workshop.html

  - title: Why I developed this course
    jurl: /learnapidoc/docapis_foreword.html

  - title: About the author
    jurl: /learnapidoc/docapis_about_the_author.html

  - title: Introduction to REST API documentation
    jurl: /learnapidoc/docapis_intro_to_rest_api_doc.html

  - title: What is a REST API?
    jurl: /learnapidoc/docapis_what_is_a_rest_api.html

  - title: "Activity: Identify your goals"
    jurl: /learnapidoc/docapis_identify_your_goals.html

  - title: "Developer Documentation Trends: Survey Results"
    jurl: /learnapidoc/docapis_trends.html

- title: "Chapter 2: Using an API like a developer"
  landing: /learnapidoc/likeadeveloper.html
  section: two
  description: > 
    Playing a brief role as a developer will help you understand developer needs better, as well as what developers typically look for in API documentation. Developers often use tools such as Postman or curl to make calls. They look at the structure of the response, and they dynamically integrate the needed information into web pages and other applications.
  folderitems:

  - title: "Overview" 
    jurl: /learnapidoc/likeadeveloper.html
    type: web

  - title: "Scenario for using a weather API"
    jurl: /learnapidoc/docapis_scenario_for_using_weather_api.html

  - title: "Get authorization keys"
    jurl: /learnapidoc/docapis_get_auth_keys.html

  - title: "Submit requests through Postman"
    jurl: /learnapidoc/docapis_postman.html

  - title: "curl intro and installation"
    jurl: /learnapidoc/docapis_install_curl.html

  - title: "Make a curl call"
    jurl: /learnapidoc/docapis_make_curl_call.html

  - title: "Understand curl more"
    jurl: /learnapidoc/docapis_understand_curl.html

  - title: "Activity: Use methods with curl"
    jurl: /learnapidoc/docapis_curl_with_petstore.html

  - title: "Analyze the JSON response"
    jurl: /learnapidoc/docapis_analyze_json.html

  - title: "Inspect the JSON from the response payload"
    jurl: /learnapidoc/docapis_json_console.html

  - title: "Access and print a specific JSON value"
    jurl: /learnapidoc/docapis_access_json_values.html

  - title: "Dive into dot notation"
    jurl: /learnapidoc/docapis_diving_into_dot_notation.html

- title: "Chapter 3: Documenting API endpoints"
  landing: /learnapidoc/docendpoints.html
  section: three
  description: > 
    Reference documentation for API endpoints consists of five general sections: resource descriptions, endpoints and methods, parameters, sample requests, and sample responses and schemas. To document the reference endpoints of an API, provide detailed information for each of these sections.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/docendpoints.html
    type: web

  - title: "A new endpoint to document"
    jurl: /learnapidoc/docapis_new_endpoint_to_doc.html

  - title: "API reference tutorial overview"
    jurl: /learnapidoc/docapis_api_reference_tutorial_overview.html

  - title: "Step 1: Resource description"
    jurl: /learnapidoc/docapis_resource_descriptions.html

  - title: "Step 2: Endpoints and methods"
    jurl: /learnapidoc/docapis_resource_endpoints.html

  - title: "Step 3: Parameters"
    jurl: /learnapidoc/docapis_doc_parameters.html

  - title: "Step 4: Request example"
    jurl: /learnapidoc/docapis_doc_sample_requests.html

  - title: "Step 5: Response example and schema"
    jurl: /learnapidoc/docapis_doc_sample_responses_and_schema.html

  - title: "Putting it all together"
    jurl: /learnapidoc/docapis_finished_doc_result.html

  - title: "Activity: What's wrong with this API reference topic"
    jurl: /learnapidoc/docapis_api_whats_wrong_activity.html

  - title: "Activity: Evaluate API reference docs for core elements"
    jurl: /learnapidoc/docapis_api_reference_activity.html

- title: "Chapter 4: OpenAPI spec and generated reference docs"
  landing: /learnapidoc/restapispecifications.html
  section: four
  description: >
    The OpenAPI specification provides a formal way of describing your REST API and includes all the reference sections mentioned in the previous section, Documenting API endpoints. Display frameworks such as Swagger UI can parse the OpenAPI specification and generate interactive documentation that lets users try out endpoints while learning about the API.

  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/restapispecifications.html
    type: web

  - title: "Overview of REST API specification formats"
    jurl: /learnapidoc/pubapis_rest_specification_formats.html

  - title: "Introduction to the OpenAPI specification"
    jurl: /learnapidoc/pubapis_openapi_intro.html

  - title: "Stoplight: Visual modeling tools for creating your spec"
    jurl: /learnapidoc/pubapis_stoplight.html

  - title: "Getting started tutorial: Using Stoplight Studio to create an OpenAPI specification document"
    jurl: /learnapidoc/pubapis_openapis_quickstart_stoplight.html

  - title: "Swagger UI tutorial"
    jurl: /learnapidoc/pubapis_swagger.html

  - title: "SwaggerHub introduction and tutorial"
    jurl: /learnapidoc/pubapis_swaggerhub_smartbear.html

  - title: "Swagger UI Demo"
    jurl: /learnapidoc/pubapis_swagger_demo.html

  - title: "Integrating Swagger UI with the rest of your docs"
    jurl: /learnapidoc/pubapis_combine_swagger_and_guide.html

  - title: "Redocly tutorial -- authoring and publishing API docs with Redocly's command-line tools"
    jurl: /learnapidoc/pubapis_redocly.html

  - title: "Redoc Community Edition Basic Demo"
    jurl: /learnapidoc/pubapis_redoc.html

- title: "Chapter 5: Step-by-step OpenAPI code tutorial"
  landing: /learnapidoc/openapi_tutorial.html
  section: five
  description: > 
    If you want to build the OpenAPI spec by hand in a text editor, this tutorial will help you get started. Even though documentation isn’t necessarily linear, I break down the various sections in the OpenAPI YAML file and go through them line by line. Approaching the OpenAPI file manually requires a more advanced understanding of the spec, YAML or JSON syntax, and how to approach strategies specific to your API.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/openapi_tutorial.html
    type: web

  - title: "OpenAPI tutorial using Swagger Editor and Swagger UI: Overview"
    jurl: /learnapidoc/pubapis_openapi_tutorial_overview.html

  - title: "Working in YAML"
    jurl: /learnapidoc/pubapis_yaml.html

  - title: "Step 1: The openapi object"
    jurl: /learnapidoc/pubapis_openapi_step1_openapi_object.html

  - title: "Step 2: The info object"
    jurl: /learnapidoc/pubapis_openapi_step2_info_object.html

  - title: "Step 3: The servers object"
    jurl: /learnapidoc/pubapis_openapi_step3_servers_object.html

  - title: "Step 4: The paths object"
    jurl: /learnapidoc/pubapis_openapi_step4_paths_object.html

  - title: "Step 5: The components object"
    jurl: /learnapidoc/pubapis_openapi_step5_components_object.html

  - title: "Step 6: security object"
    jurl: /learnapidoc/pubapis_openapi_step6_security_object.html

  - title: "Step 7: The tags object"
    jurl: /learnapidoc/pubapis_openapi_step7_tags_object.html

  - title: "Step 8: The externalDocs object"
    jurl: /learnapidoc/pubapis_openapi_step8_externaldocs_object.html

  - title: "Activity: Create an OpenAPI specification document"
    jurl: /learnapidoc/pubapis_openapi_activity.html

- title: "Chapter 6: Testing API docs"
  landing: /learnapidoc/testingdocs.html
  section: six
  description: >
    Testing your documentation is critical to providing accurate, thorough information. With API and developer docs, due to the high level of complexity and engineering requirements, technical writers might be inclined to simply take information that engineers give them and incorporate it wholesale, without personally testing it. Merely playing an editorial/publishing function, however, can reduce your role to that of an engineer’s secretary.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/testingdocs.html
    type: web

  - title: "Overview of testing your docs"
    jurl: /learnapidoc/testingdocs_overview.html

  - title: "Set up a test environment"
    jurl: /learnapidoc/testingdocs_test_environment.html

  - title: "Test all instructions yourself"
    jurl: /learnapidoc/testingdocs_test_your_instructions.html

  - title: "Test your assumptions"
    jurl: /learnapidoc/testingdocs_testing_assumptions.html

  - title: "Activity: Test your project's documentation"
    jurl: /learnapidoc/testingdocs_activity.html

- title: "Chapter 7: Conceptual topics in API docs"
  landing: /learnapidoc/docconceptual.html
  section: seven
  description: >
    While reference topics in APIs generally receive the most attention, the conceptual topics, such as getting started tutorials, information about authorization, rate limiting, status and error codes, quick reference guides, and other topics constitute about half of the documentation. These topics are usually handled by technical writers more than engineers. You can evaluate the quality of API documentation in part by looking to see whether it includes these conceptual topics.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/docconceptual.html
    type: web

  - title: "API conceptual topics overview"
    jurl: /learnapidoc/docapis_conceptual_topics_overview.html

  - title: "API product overviews"
    jurl: /learnapidoc/docapis_doc_overview.html

  - title: "API getting started tutorials"
    jurl: /learnapidoc/docapis_doc_getting_started_section.html

  - title: API authentication and authorization
    jurl: /learnapidoc/docapis_more_about_authorization.html

  - title: "API status and error codes"
    jurl: /learnapidoc/docapis_doc_status_codes.html

  - title: "API rate limiting and thresholds"
    jurl: /learnapidoc/docapis_rate_limiting_and_thresholds.html

  - title: "API quick reference"
    jurl: /learnapidoc/docapis_doc_quick_reference.html

  - title: "API glossary"
    jurl: /learnapidoc/docapis_glossary_section.html

  - title: "API best practices"
    jurl: /learnapidoc/docapis_best_practices_with_api.html

  - title: "Activity: Complete the SendGrid Getting Started tutorial"
    jurl: /learnapidoc/docapis_getting_started_activity.html

  - title: "Activity: Assess the conceptual content in your project"
    jurl: /learnapidoc/docapis_concept_activity.html

- title: "Chapter 8: Code tutorials"
  landing: /learnapidoc/docapiscode.html
  section: eight
  description: >
    Documenting code poses one of the most challenging tasks for technical writers, especially if the writers don’t have an engineering background or familiarity with the code. Even without deeper engineering expertise, you can still document code — everything from code snippets to full-fledged sample apps. This section explores techniques and strategies for documenting code.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/docapiscode.html
    type: web

  - title: "Common characteristics of code tutorials"
    jurl: /learnapidoc/docapis_code_tutorials_common_characteristics.html

  - title: Why documenting code is so difficult
    jurl: /learnapidoc/docapis_code_difficulty.html

  - title: What research tells us about documenting code
    jurl: /learnapidoc/docapiscode_research_on_documenting_code.html

  - title: Five strategies for documenting code
    jurl: /learnapidoc/docapis_code_strategies.html

  - title: Code samples
    jurl: /learnapidoc/docapis_codesamples_bestpractices.html

  - title: Sample apps
    jurl: /learnapidoc/docapis_sample_apps.html

  - title: SDKs (software development kits)
    jurl: /learnapidoc/docapis_sdks.html

  - title: "API design and usability"
    jurl: /learnapidoc/evaluating-api-design.html

  - title: "Developer experience (DevX) usability"
    jurl: /learnapidoc/devx-usability-examples.html

- title: "Chapter 9: The writing process"
  landing: /learnapidoc/writing_process.html
  section: nine
  description: > 
    The writing process refers to the way you write and develop content. There are five main steps to the writing process: planning, information gathering, writing, reviewing, and publishing. Although these aspects of the writing process are general to almost every type of writing, in this section I tailor the information to be specific to writing technical documentation.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/writing_process.html
    type: web

  - title: "Overview of the writing process"
    jurl: /learnapidoc/docapis_writing_process_overview.html

  - title: "1. Planning"
    jurl: /learnapidoc/docapis_planning.html

  - title: "2. Information gathering"
    jurl: /learnapidoc/docapis_information_gathering.html

  - title: "3. Writing"
    jurl: /learnapidoc/docapis_writing.html

  - title: "4. Reviewing"
    jurl: /learnapidoc/docapis_reviewing.html

  - title: "5. Publishing"
    jurl: /learnapidoc/docapis_publishing.html

- title: "Chapter 10: Publishing API docs"
  landing: /learnapidoc/publishingapis.html
  section: ten
  description: >
    API documentation often follows a docs-as-code workflow, where the tools to author and publish documentation align closely with the same tools developers use to write, manage, build, and deploy code. Docs-as-code involves using lightweight formats such as Markdown, collaborating through Git or other version control, building your doc site with a static site generator, and deploying it through a continuous build model, where the build happens on the server when you push commits to a particular branch.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/publishingapis.html
    type: web

  - title: "Overview for publishing API docs"
    jurl: /learnapidoc/pubapis_overview.html

  - title: "Survey of API doc sites"
    jurl: /learnapidoc/pubapis_apilist.html

  - title: "Design patterns with API doc sites"
    jurl: /learnapidoc/pubapis_design_patterns.html

  - title: "Docs-as-code tools"
    jurl: /learnapidoc/pubapis_docs_as_code.html

  - title: "More about Markdown"
    jurl: /learnapidoc/pubapis_markdown.html

  - title: "Version control systems"
    jurl: /learnapidoc/pubapis_version_control.html

  - title: "Static site generators"
    jurl: /learnapidoc/pubapis_static_site_generators.html

  - title: "Hosting and deployment options"
    jurl: /learnapidoc/pubapis_hosting_and_deployment.html

  - title: "Hybrid documentation systems"
    jurl: /learnapidoc/pubapis_hybrid_systems.html

  - title: "Which tool to choose for API docs &mdash; my recommendations"
    jurl: /learnapidoc/pubapis_which_tool_to_choose.html

- title: "Chapter 11: Publishing tools"
  landing: /learnapidoc/publishingtools.html
  section: eleven
  description: > 
    This section focuses on various publishing tools and tutorials related to those tools. The chapter continues similar themes of publishing from the previous chapter but dives into the details of several tools, a publishing workflow, case study, and more.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/publishingtools.html
    type: web
    
  - title: "Activity: Manage content in a GitHub wiki"
    jurl: /learnapidoc/pubapis_github_wikis.html

  - title: "Activity: Use the GitHub Desktop Client"
    jurl: /learnapidoc/pubapis_github_desktop_client.html

  - title: "Activity: Pull request workflows through GitHub"
    jurl: /learnapidoc/pubapis_github_pull_requests.html

  - title: "Jekyll and CloudCannon continuous deployment tutorial"
    jurl: /learnapidoc/pubapis_jekyll.html

  - title: "Using Oxygen XML with docs-as-code workflows"
    jurl: /learnapidoc/pubapis_oxygenxml.html

  - title: "Blobr: An API portal that arranges your API's use cases as individual products"
    jurl: /learnapidoc/pubapis_blobr.html

  - title: "Case study: Switching tools to docs-as-code"
    jurl: /learnapidoc/pubapis_switching_to_docs_as_code.html

  - title: "Tools FAQ"
    jurl: /learnapidoc/docapis_faq_tools.html

- title: "Chapter 12: Thriving in the API doc space"
  landing: /learnapidoc/jobapis.html
  section: twelve
  description: >
    Getting an API documentation job and thriving requires you to demonstrate your technical aptitude through a writing portfolio. The portfolio should include samples of documentation written for developers. One way to build this portfolio is by working on an open-source project. You also need to live in a tech hub where API documentation jobs are available, such as California, Texas, New York, or Virginia. Overall, thriving in the developer documentation space requires you to continually learn a healthy dose of code, which can be challenging.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/jobapis.html
    type: web

  - title: "The job market for API technical writers"
    jurl: /learnapidoc/jobapis_overview.html

  - title: "How much code do you need to know?"
    jurl: /learnapidoc/jobapis_learning_code.html

  - title: "Best locations for API documentation jobs"
    jurl: /learnapidoc/jobapis_location.html

  - title: "Activity: Find an Open-Source Project"
    jurl: /learnapidoc/docapis_find_open_source_project.html

  - title: "Activity: Create or fix an API reference documentation topic"
    jurl: /learnapidoc/docapis_work_on_conceptual_topic.html

- title: "Chapter 13: Native library APIs"
  landing: /learnapidoc/nativelibraryapis.html
  section: thirteen
  description: >
    Native library APIs refer to Java, C++, or other programming-specific APIs. In this model, rather than making requests across the web for the information, you download a library of code and integrate it into your project. The library is compiled directly into your application's build (rather than accessed through web protocols as with REST APIs). Although this type of API is less common, I include it here in part to clarify what makes REST APIs so different from native library APIs.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/nativelibraryapis.html
    type: web

  - title: "Overview of native library APIs"
    jurl: /learnapidoc/nativelibraryapis_overview.html

  - title: "Get the sample Java project"
    jurl: /learnapidoc/nativelibraryapis_getting_the_source.html

  - title: "Java crash course"
    jurl: /learnapidoc/nativelibraryapis_java_crash_course.html

  - title: "Activity: Generate a Javadoc from a sample project"
    jurl: /learnapidoc/nativelibraryapis_create_javadoc.html

  - title: "Javadoc tags"
    jurl: /learnapidoc/nativelibraryapis_javadoc_tags.html

  - title: "Explore the Javadoc output"
    jurl: /learnapidoc/nativelibraryapis_exploring_javadoc_output.html

  - title: "Make edits to Javadoc tags"
    jurl: /learnapidoc/nativelibraryapis_editing_javadoc.html

  - title: "Doxygen, a document generator mainly for C++"
    jurl: /learnapidoc/nativelibraryapis_doxygen.html

  - title: "Create non-ref docs with native library APIs"
    jurl: /learnapidoc/nativelibraryapis_nonrefdocs.html

- title: "Chapter 14: Processes and methodology"
  landing: /learnapidoc/docapis_managing_doc_processes.html
  section: fourteen
  description: > 
    The process for managing developer portal documentation includes a number of different tasks outside of content development. The role of a DX (developer experience) content strategist plays a key role in defining workflows, standards, user flows, processes, and other aspects of the site. workflows for different types of documentation. In this section, I cover details for how to manage the doc work, including processes for fixing doc bugs versus tackling larger doc projects. I also explain processes for releasing SDKs, managing external contributions, and more.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/docapis_managing_doc_processes.html
    type: web

  - title: "DX content strategy with developer portals"
    jurl: /learnapidoc/docapis_dx_content_strategy.html

  - title: "Following agile scrum with documentation projects"
    jurl: /learnapidoc/pubapis_agile_scrum_for_docs.html

  - title: "Managing large documentation projects"
    jurl: /learnapidoc/docapis_managing_doc_projects.html

  - title: "Managing small documentation requests"
    jurl: /learnapidoc/docapis_managing_small_doc_requests.html

  - title: "Managing SDK releases"
    jurl: /learnapidoc/docapis_managing_sdk_releases.html

  - title: "Documentation kickoff meetings and product demos"
    jurl: /learnapidoc/docapis_kickoff_meeting_agenda.html

  - title: "Processes for reviewing documentation"
    jurl: /learnapidoc/docapis_review_processes.html

  - title: "Maintaining existing documentation"
    jurl: /learnapidoc/docapis_doc_maintenance_processes.html

  - title: "Collecting feedback post-release"
    jurl: /learnapidoc/docapis_collecting_feedback_post_release.html

  - title: "Managing content from external contributors"
    jurl: /learnapidoc/docapis_processes_for_external_contributors.html

  - title: "Changing internal doc culture"
    jurl: /learnapidoc/docapis_changing_internal_doc_culture.html

  - title: "Sending doc status reports -- a tool for visibility and relationship building"
    jurl: /learnapidoc/docapis_status_reports.html

  - title: Broadcasting your meeting notes to influence a wider audience
    jurl: /learnapidoc/docapis_meeting_notes.html

  - title: "Ensuring documentation coverage with each software release"
    jurl: /learnapidoc/docapis_release_process.html

- title: "Chapter 15: Metrics and measurement"
  landing: /learnapidoc/docapis_metrics_and_measurement.html
  section: fifteen
  description: >
    Metrics and measurement addresses ways to measure API documentation quality and how to track your progress on improvement. You can use the quality checklist here to review essential components of documentation and decide how your API docs measure up. The checklist can be a way to investigate, analyze, and interrogate your documentation from another perspective and discover ways to improve it.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/docapis_metrics_and_measurement.html
    type: web

  - title: Measuring documentation quality through user feedback
    jurl: /learnapidoc/docapis_measuring_impact.html

  - title: Different approaches for assessing information quality
    jurl: /learnapidoc/docapis_metrics_assessing_information_quality.html

  - title: Quality checklist for API documentation
    jurl: /learnapidoc/docapis_quality_checklist.html

  - title: Quantifying your progress
    jurl: /learnapidoc/docapis_metrics_quantifying_progress.html

- title: "Chapter 16: AI and API documentation"
  landing: /learnapidoc/ai.html
  section: sixteen
  description: >
    AI tools can help speed up authoring, demystifying code, automating publishing tasks, populating templates, and more. This section will look at how to use AI tools within the context of API documentation.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/ai.html
    type: web

  - title:  "First look at the Oxygen XML AI Positron Assistant"
    jurl: /learnapidoc/docapis_oxygenxml_positron_assistant.html

  - title:  "AI document engineering with pattern-based prompts"
    jurl: /learnapidoc/docapis_pattern_prompts.html

  - title: "Using AI tools to build, stage, and publish API reference docs"
    jurl: /learnapidoc/ai-tools-build-publish-api-docs.html

  - title: "Using AI to learn coding"
    jurl: /learnapidoc/docapis_ai_learn_coding.html

  - title:  "Using AI for language advice"
    jurl: /learnapidoc/docapis_ai_language_advice.html

  - title:  "Using AI to create doc updates based on bugs"
    jurl: /learnapidoc/docapis_ai_fix_bugs.html

  - title:  "Using AI For thematic analysis"
    jurl: /learnapidoc/docapis_thematic_analysis.html

  - title:  "Using AI for comparison tasks with API responses"
    jurl: /learnapidoc/docapis_ai_comparison_tasks.html

  - title:  "Using AI for glossary definitions"
    jurl: /learnapidoc/docapis_ai_glossary_definitions.html

  - title:  "Using AI for summaries"
    jurl: /learnapidoc/docapis_ai_summaries.html

- title: "Chapter 17: Glossary"
  landing: /learnapidoc/glossary_overview.html
  section: seventeen
  description: >
    This section contains definitions of glossary terms. It also contains term groups so you can learn all the key terms within a specific subject area.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/glossary_overview.html
    type: web

  - title: "Glossary"
    jurl: /learnapidoc/glossary.html

  - title: "Glossary groups"
    jurl: /learnapidoc/glossary_groups.html

- title: "Chapter 18: Additional resources"
  landing: /learnapidoc/resources.html
  section: eighteen
  description: > 
    This section contains additional exercises and information, such as more activities for calling APIs, or more info about alternative specifications. I also archive topics here that don’t seem to fit well anywhere else.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/resources.html
    type: web

  - title: "Documenting GraphQL APIs"
    jurl: /learnapidoc/docapis_graphql_apis.html

  - title: "More REST API activities"
    jurl: /learnapidoc/docapis_more_rest_activities.html

  - title: "Activity: Get event information using the Eventbrite API"
    jurl: /learnapidoc/docapis_eventbrite_example.html

  - title: "Activity: Retrieve a gallery using the Flickr API"
    jurl: /learnapidoc/docapis_flickr_example.html

  - title: "Activity: Get wind speed using the Aeris Weather API"
    jurl: /learnapidoc/docapis_aerisweather_example.html

  - title: "RAML tutorial"
    jurl: /learnapidoc/pubapis_raml.html

  - title: "API Blueprint tutorial"
    jurl: /learnapidoc/pubapis_api_blueprint.html

  - title: "API jeopardy answer key"
    jurl: /learnapidoc/jeopardy_answer_key.html

  - title: "What's wrong with this topic answer key"
    jurl: /learnapidoc/whats_wrong_answer_key.html

  - title: "Menlo Park API workshop video recording"
    jurl: /learnapidoc/menlo_park_workshop_recording.html

  - title: "Denver API workshop video recording"
    jurl: /learnapidoc/denver_workshop_recording.html

  - title: "API doc presentation video recordings"
    jurl: /learnapidoc/api_doc_presentations.html
